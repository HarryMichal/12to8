// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.3 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

const (
	ApiKeyAuthScopes         = "apiKeyAuth.Scopes"
	BasicAuthScopes          = "basicAuth.Scopes"
	OAuth2PasswordAuthScopes = "oAuth2PasswordAuth.Scopes"
)

// Defines values for Gender.
const (
	F Gender = "f"
	M Gender = "m"
)

// Defines values for LeaveStatus.
const (
	LeaveStatusApproved LeaveStatus = "approved"
	LeaveStatusDraft    LeaveStatus = "draft"
	LeaveStatusPending  LeaveStatus = "pending"
	LeaveStatusRejected LeaveStatus = "rejected"
)

// Defines values for TimesheetStatus.
const (
	TimesheetStatusActive  TimesheetStatus = "active"
	TimesheetStatusClosed  TimesheetStatus = "closed"
	TimesheetStatusPending TimesheetStatus = "pending"
)

// Defines values for GetAttachmentsParamsOrderBy.
const (
	GetAttachmentsParamsOrderByName GetAttachmentsParamsOrderBy = "name"
)

// Defines values for GetContractUsersParamsOrderBy.
const (
	GetContractUsersParamsOrderByContract GetContractUsersParamsOrderBy = "contract"
)

// Defines values for GetContractsParamsOrderBy.
const (
	GetContractsParamsOrderByActive GetContractsParamsOrderBy = "active"
	GetContractsParamsOrderByName   GetContractsParamsOrderBy = "name"
)

// Defines values for GetHolidaysParamsOrderBy.
const (
	GetHolidaysParamsOrderByCountry GetHolidaysParamsOrderBy = "country"
	GetHolidaysParamsOrderByDate    GetHolidaysParamsOrderBy = "date"
	GetHolidaysParamsOrderByName    GetHolidaysParamsOrderBy = "name"
)

// Defines values for GetLeaveParamsOrderBy.
const (
	GetLeaveParamsOrderByStatus GetLeaveParamsOrderBy = "status"
)

// Defines values for GetPerformancesParamsOrderBy.
const (
	GetPerformancesParamsOrderByDate GetPerformancesParamsOrderBy = "date"
)

// Defines values for GetTimesheetsParamsOrderBy.
const (
	GetTimesheetsParamsOrderByMonth  GetTimesheetsParamsOrderBy = "month"
	GetTimesheetsParamsOrderByStatus GetTimesheetsParamsOrderBy = "status"
	GetTimesheetsParamsOrderByYear   GetTimesheetsParamsOrderBy = "year"
)

// Defines values for GetUsersParamsOrderBy.
const (
	Email     GetUsersParamsOrderBy = "email"
	FirstName GetUsersParamsOrderBy = "first_name"
	LastName  GetUsersParamsOrderBy = "last_name"
	Username  GetUsersParamsOrderBy = "username"
)

// Defines values for GetWhereaboutsParamsOrderBy.
const (
	StartsAt GetWhereaboutsParamsOrderBy = "starts_at"
)

// ActivityPerformance defines model for ActivityPerformance.
type ActivityPerformance struct {
	Contract        *MinimalContract        `json:"contract,omitempty"`
	ContractRole    *MinimalContractRole    `json:"contract_role,omitempty"`
	CreatedAt       *time.Time              `json:"created_at,omitempty"`
	Date            *time.Time              `json:"date,omitempty"`
	Description     *string                 `json:"description,omitempty"`
	DisplayLabel    *string                 `json:"display_label,omitempty"`
	Duration        *float64                `json:"duration,omitempty"`
	Id              *int                    `json:"id,omitempty"`
	PerformanceType *MinimalPerformanceType `json:"performance_type,omitempty"`
	RedmineId       *float32                `json:"redmine_id,omitempty"`
	Type            *string                 `json:"type,omitempty"`
	UpdatedAt       *time.Time              `json:"updated_at,omitempty"`
}

// ActivityPerformanceBody defines model for ActivityPerformanceBody.
type ActivityPerformanceBody struct {
	Contract        *float32   `json:"contract,omitempty"`
	ContractRole    *float32   `json:"contract_role,omitempty"`
	CreatedAt       *time.Time `json:"created_at,omitempty"`
	Date            *time.Time `json:"date,omitempty"`
	Description     *string    `json:"description,omitempty"`
	DisplayLabel    *string    `json:"display_label,omitempty"`
	Duration        *float64   `json:"duration,omitempty"`
	Id              *int       `json:"id,omitempty"`
	PerformanceType *float32   `json:"performance_type,omitempty"`
	RedmineId       *float32   `json:"redmine_id,omitempty"`
	Type            *string    `json:"type,omitempty"`
	UpdatedAt       *time.Time `json:"updated_at,omitempty"`
}

// Attachment defines model for Attachment.
type Attachment struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	File         *string    `json:"file,omitempty"`
	FileUrl      *string    `json:"file_url,omitempty"`
	Id           *int       `json:"id,omitempty"`
	Name         *string    `json:"name,omitempty"`
	Slug         *string    `json:"slug,omitempty"`
	Type         *string    `json:"type,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// AttachmentBody defines model for AttachmentBody.
type AttachmentBody struct {
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	Description  *string             `json:"description,omitempty"`
	DisplayLabel *string             `json:"display_label,omitempty"`
	File         *openapi_types.File `json:"file,omitempty"`
	Id           *int                `json:"id,omitempty"`
	Name         *string             `json:"name,omitempty"`
	Type         *string             `json:"type,omitempty"`
	UpdatedAt    *time.Time          `json:"updated_at,omitempty"`
}

// BaseModel defines model for BaseModel.
type BaseModel struct {
	DisplayLabel *string `json:"display_label,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// BasicModel defines model for BasicModel.
type BasicModel struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	Id           *int       `json:"id,omitempty"`
	Type         *string    `json:"type,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// Contract defines model for Contract.
type Contract struct {
	Active           *bool                     `json:"active,omitempty"`
	Company          *MinimalCompany           `json:"company,omitempty"`
	CreatedAt        *time.Time                `json:"created_at,omitempty"`
	Customer         *MinimalCompany           `json:"customer,omitempty"`
	Description      *string                   `json:"description,omitempty"`
	DisplayLabel     *string                   `json:"display_label,omitempty"`
	EndsAt           *time.Time                `json:"ends_at,omitempty"`
	Id               *int                      `json:"id,omitempty"`
	Name             *string                   `json:"name,omitempty"`
	PerformanceTypes *[]MinimalPerformanceType `json:"performance_types,omitempty"`
	StartsAt         *time.Time                `json:"starts_at,omitempty"`
	Type             *string                   `json:"type,omitempty"`
	UpdatedAt        *time.Time                `json:"updated_at,omitempty"`
}

// ContractRole defines model for ContractRole.
type ContractRole struct {
	DisplayLabel *string `json:"display_label,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// ContractUser defines model for ContractUser.
type ContractUser struct {
	Contract     *MinimalContract     `json:"contract,omitempty"`
	ContractRole *MinimalContractRole `json:"contract_role,omitempty"`
	CreatedAt    *time.Time           `json:"created_at,omitempty"`
	DisplayLabel *string              `json:"display_label,omitempty"`
	Id           *int                 `json:"id,omitempty"`
	Type         *string              `json:"type,omitempty"`
	UpdatedAt    *time.Time           `json:"updated_at,omitempty"`
}

// Gender defines model for Gender.
type Gender string

// Holiday defines model for Holiday.
type Holiday struct {
	Country      *string             `json:"country,omitempty"`
	Date         *openapi_types.Date `json:"date,omitempty"`
	DisplayLabel *string             `json:"display_label,omitempty"`
	Id           *int                `json:"id,omitempty"`
	Name         *string             `json:"name,omitempty"`
	Type         *string             `json:"type,omitempty"`
}

// Leave defines model for Leave.
type Leave struct {
	Attachments  *[]float32        `json:"attachments,omitempty"`
	CreatedAt    *time.Time        `json:"created_at,omitempty"`
	Description  *string           `json:"description,omitempty"`
	DisplayLabel *string           `json:"display_label,omitempty"`
	Id           *int              `json:"id,omitempty"`
	LeaveType    *MinimalLeaveType `json:"leave_type,omitempty"`
	LeavedateSet *[]LeaveDate      `json:"leavedate_set,omitempty"`
	Status       *LeaveStatus      `json:"status,omitempty"`
	Type         *string           `json:"type,omitempty"`
	UpdatedAt    *time.Time        `json:"updated_at,omitempty"`
}

// LeaveBody defines model for LeaveBody.
type LeaveBody struct {
	Attachments  *[]float32   `json:"attachments,omitempty"`
	CreatedAt    *time.Time   `json:"created_at,omitempty"`
	Description  *string      `json:"description,omitempty"`
	DisplayLabel *string      `json:"display_label,omitempty"`
	EndsAt       *time.Time   `json:"ends_at,omitempty"`
	FullDay      *bool        `json:"full_day,omitempty"`
	Id           *int         `json:"id,omitempty"`
	LeaveType    *float32     `json:"leave_type,omitempty"`
	StartsAt     *time.Time   `json:"starts_at,omitempty"`
	Status       *LeaveStatus `json:"status,omitempty"`
	Type         *string      `json:"type,omitempty"`
	UpdatedAt    *time.Time   `json:"updated_at,omitempty"`
}

// LeaveDate defines model for LeaveDate.
type LeaveDate struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	EndsAt       *time.Time `json:"ends_at,omitempty"`
	Id           *int       `json:"id,omitempty"`
	StartsAt     *time.Time `json:"starts_at,omitempty"`
	Type         *string    `json:"type,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// LeaveStatus defines model for LeaveStatus.
type LeaveStatus string

// LeaveType defines model for LeaveType.
type LeaveType struct {
	DisplayLabel *string `json:"display_label,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// Location defines model for Location.
type Location struct {
	DisplayLabel *string `json:"display_label,omitempty"`
	Id           *int    `json:"id,omitempty"`
	Name         *string `json:"name,omitempty"`
	Type         *string `json:"type,omitempty"`
}

// Me defines model for Me.
type Me struct {
	DisplayLabel *string              `json:"display_label,omitempty"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	FirstName    *string              `json:"first_name,omitempty"`
	Groups       *MinimalGroup        `json:"groups,omitempty"`
	Id           *int                 `json:"id,omitempty"`
	IsActive     *bool                `json:"is_active,omitempty"`
	IsStaff      *bool                `json:"is_staff,omitempty"`
	IsSuperuser  *bool                `json:"is_superuser,omitempty"`
	LastName     *string              `json:"last_name,omitempty"`
	Type         *string              `json:"type,omitempty"`
	Userinfo     *UserInfo            `json:"userinfo,omitempty"`
	Username     *string              `json:"username,omitempty"`
}

// MinimalCompany defines model for MinimalCompany.
type MinimalCompany = MinimalModel

// MinimalContract defines model for MinimalContract.
type MinimalContract = MinimalModel

// MinimalContractRole defines model for MinimalContractRole.
type MinimalContractRole = MinimalModel

// MinimalGroup defines model for MinimalGroup.
type MinimalGroup = MinimalModel

// MinimalLeaveType defines model for MinimalLeaveType.
type MinimalLeaveType = MinimalModel

// MinimalLocation defines model for MinimalLocation.
type MinimalLocation = MinimalModel

// MinimalModel defines model for MinimalModel.
type MinimalModel = BaseModel

// MinimalPerformanceType defines model for MinimalPerformanceType.
type MinimalPerformanceType = MinimalModel

// Performance defines model for Performance.
type Performance struct {
	Contract     *MinimalContract `json:"contract,omitempty"`
	CreatedAt    *time.Time       `json:"created_at,omitempty"`
	Date         *time.Time       `json:"date,omitempty"`
	DisplayLabel *string          `json:"display_label,omitempty"`
	Id           *int             `json:"id,omitempty"`
	Type         *string          `json:"type,omitempty"`
	UpdatedAt    *time.Time       `json:"updated_at,omitempty"`
}

// PerformanceBody defines model for PerformanceBody.
type PerformanceBody struct {
	Contract     *float32   `json:"contract,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Date         *time.Time `json:"date,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	Id           *int       `json:"id,omitempty"`
	Type         *string    `json:"type,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// PerformanceImportSuggestion defines model for PerformanceImportSuggestion.
type PerformanceImportSuggestion struct {
	Contract    *float32            `json:"contract,omitempty"`
	Date        *openapi_types.Date `json:"date,omitempty"`
	Description *string             `json:"description,omitempty"`
	Duration    *float64            `json:"duration,omitempty"`
	Id          *float32            `json:"id"`
	RedmineId   *float32            `json:"redmine_id,omitempty"`
}

// PerformanceType defines model for PerformanceType.
type PerformanceType struct {
	DisplayLabel *string  `json:"display_label,omitempty"`
	Id           *int     `json:"id,omitempty"`
	Multiplier   *float64 `json:"multiplier,omitempty"`
	Name         *string  `json:"name,omitempty"`
	Type         *string  `json:"type,omitempty"`
}

// StandbyPerformance defines model for StandbyPerformance.
type StandbyPerformance = Performance

// StandbyPerformanceBody defines model for StandbyPerformanceBody.
type StandbyPerformanceBody struct {
	Contract     *float32   `json:"contract,omitempty"`
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Date         *time.Time `json:"date,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	Id           *int       `json:"id,omitempty"`
	Type         *string    `json:"type,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// Timesheet defines model for Timesheet.
type Timesheet struct {
	Attachments  *[]float32       `json:"attachments,omitempty"`
	CreatedAt    *time.Time       `json:"created_at,omitempty"`
	DisplayLabel *string          `json:"display_label,omitempty"`
	Id           *int             `json:"id,omitempty"`
	Month        *float32         `json:"month,omitempty"`
	Status       *TimesheetStatus `json:"status,omitempty"`
	Type         *string          `json:"type,omitempty"`
	UpdatedAt    *time.Time       `json:"updated_at,omitempty"`
	Year         *float32         `json:"year,omitempty"`
}

// TimesheetBody defines model for TimesheetBody.
type TimesheetBody struct {
	Attachments  *[]float32       `json:"attachments,omitempty"`
	CreatedAt    *time.Time       `json:"created_at,omitempty"`
	DisplayLabel *string          `json:"display_label,omitempty"`
	Id           *int             `json:"id,omitempty"`
	Month        *float32         `json:"month,omitempty"`
	Status       *TimesheetStatus `json:"status,omitempty"`
	Type         *string          `json:"type,omitempty"`
	UpdatedAt    *time.Time       `json:"updated_at,omitempty"`
	Year         *float32         `json:"year,omitempty"`
}

// TimesheetStatus defines model for TimesheetStatus.
type TimesheetStatus string

// User defines model for User.
type User struct {
	DisplayLabel *string              `json:"display_label,omitempty"`
	Email        *openapi_types.Email `json:"email,omitempty"`
	FirstName    *string              `json:"first_name,omitempty"`
	Id           *int                 `json:"id,omitempty"`
	IsActive     *bool                `json:"is_active,omitempty"`
	LastName     *string              `json:"last_name,omitempty"`
	Type         *string              `json:"type,omitempty"`
	Userinfo     *UserInfo            `json:"userinfo,omitempty"`
	Username     *string              `json:"username,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	BirthDate    *time.Time `json:"birth_date,omitempty"`
	Country      *string    `json:"country,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	Gender       *Gender    `json:"gender,omitempty"`
	Id           *int       `json:"id,omitempty"`
	JoinDate     *time.Time `json:"join_date,omitempty"`
	PhoneNumber  *string    `json:"phone_number,omitempty"`
	Type         *string    `json:"type,omitempty"`
}

// Whereabout defines model for Whereabout.
type Whereabout struct {
	CreatedAt    *time.Time       `json:"created_at,omitempty"`
	Description  *string          `json:"description,omitempty"`
	DisplayLabel *string          `json:"display_label,omitempty"`
	EndsAt       *time.Time       `json:"ends_at,omitempty"`
	Id           *int             `json:"id,omitempty"`
	Location     *MinimalLocation `json:"location,omitempty"`
	StartsAt     *time.Time       `json:"starts_at,omitempty"`
	Type         *string          `json:"type,omitempty"`
	UpdatedAt    *time.Time       `json:"updated_at,omitempty"`
}

// WhereaboutBody defines model for WhereaboutBody.
type WhereaboutBody struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Description  *string    `json:"description,omitempty"`
	DisplayLabel *string    `json:"display_label,omitempty"`
	EndsAt       *time.Time `json:"ends_at,omitempty"`
	Id           *int       `json:"id,omitempty"`
	Location     *float32   `json:"location,omitempty"`
	StartsAt     *time.Time `json:"starts_at,omitempty"`
	Type         *string    `json:"type,omitempty"`
	UpdatedAt    *time.Time `json:"updated_at,omitempty"`
}

// Page defines model for page.
type Page = float32

// PageSize defines model for page_size.
type PageSize = float32

// GetAttachmentsParams defines parameters for GetAttachments.
type GetAttachmentsParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize             *PageSize                    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Name                 *string                      `form:"name,omitempty" json:"name,omitempty"`
	NameIcontains        *string                      `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	Description          *string                      `form:"description,omitempty" json:"description,omitempty"`
	DescriptionIcontains *string                      `form:"description__icontains,omitempty" json:"description__icontains,omitempty"`
	Leave                *string                      `form:"leave,omitempty" json:"leave,omitempty"`
	Timesheet            *string                      `form:"timesheet,omitempty" json:"timesheet,omitempty"`
	OrderBy              *GetAttachmentsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetAttachmentsParamsOrderBy defines parameters for GetAttachments.
type GetAttachmentsParamsOrderBy string

// GetContractRolesParams defines parameters for GetContractRoles.
type GetContractRolesParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetContractUsersParams defines parameters for GetContractUsers.
type GetContractUsersParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize                      `form:"page_size,omitempty" json:"page_size,omitempty"`
	Contract *string                        `form:"contract,omitempty" json:"contract,omitempty"`
	OrderBy  *GetContractUsersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetContractUsersParamsOrderBy defines parameters for GetContractUsers.
type GetContractUsersParamsOrderBy string

// GetContractsParams defines parameters for GetContracts.
type GetContractsParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize      *PageSize                  `form:"page_size,omitempty" json:"page_size,omitempty"`
	Name          *string                    `form:"name,omitempty" json:"name,omitempty"`
	NameIcontains *string                    `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	Active        *string                    `form:"active,omitempty" json:"active,omitempty"`
	Type          *string                    `form:"type,omitempty" json:"type,omitempty"`
	OrderBy       *GetContractsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetContractsParamsOrderBy defines parameters for GetContracts.
type GetContractsParamsOrderBy string

// GetHolidaysParams defines parameters for GetHolidays.
type GetHolidaysParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize      *PageSize                 `form:"page_size,omitempty" json:"page_size,omitempty"`
	Name          *string                   `form:"name,omitempty" json:"name,omitempty"`
	NameIcontains *string                   `form:"name__icontains,omitempty" json:"name__icontains,omitempty"`
	Date          *string                   `form:"date,omitempty" json:"date,omitempty"`
	DateGt        *string                   `form:"date__gt,omitempty" json:"date__gt,omitempty"`
	DateGte       *string                   `form:"date__gte,omitempty" json:"date__gte,omitempty"`
	DateLt        *string                   `form:"date__lt,omitempty" json:"date__lt,omitempty"`
	DateLte       *string                   `form:"date__lte,omitempty" json:"date__lte,omitempty"`
	Country       *string                   `form:"country,omitempty" json:"country,omitempty"`
	OrderBy       *GetHolidaysParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetHolidaysParamsOrderBy defines parameters for GetHolidays.
type GetHolidaysParamsOrderBy string

// GetPerformanceImportsParams defines parameters for GetPerformanceImports.
type GetPerformanceImportsParams struct {
	From  openapi_types.Date `form:"from" json:"from"`
	Until openapi_types.Date `form:"until" json:"until"`
}

// GetLeaveParams defines parameters for GetLeave.
type GetLeaveParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize             *PageSize              `form:"page_size,omitempty" json:"page_size,omitempty"`
	Status               *string                `form:"status,omitempty" json:"status,omitempty"`
	Description          *string                `form:"description,omitempty" json:"description,omitempty"`
	DescriptionIcontains *string                `form:"description__icontains,omitempty" json:"description__icontains,omitempty"`
	OrderBy              *GetLeaveParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	DateRange            *string                `form:"date__range,omitempty" json:"date__range,omitempty"`
}

// GetLeaveParamsOrderBy defines parameters for GetLeave.
type GetLeaveParamsOrderBy string

// GetLeaveTypesParams defines parameters for GetLeaveTypes.
type GetLeaveTypesParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetLocationsParams defines parameters for GetLocations.
type GetLocationsParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetPerformanceTypesParams defines parameters for GetPerformanceTypes.
type GetPerformanceTypesParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetPerformancesParams defines parameters for GetPerformances.
type GetPerformancesParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize `form:"page_size,omitempty" json:"page_size,omitempty"`
	Date     *string   `form:"date,omitempty" json:"date,omitempty"`

	// DateRange Multiple values may be separated by commas.
	DateRange *string                       `form:"date__range,omitempty" json:"date__range,omitempty"`
	Contract  *string                       `form:"contract,omitempty" json:"contract,omitempty"`
	Type      *string                       `form:"type,omitempty" json:"type,omitempty"`
	OrderBy   *GetPerformancesParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetPerformancesParamsOrderBy defines parameters for GetPerformances.
type GetPerformancesParamsOrderBy string

// PostPerformanceJSONBody defines parameters for PostPerformance.
type PostPerformanceJSONBody struct {
	union json.RawMessage
}

// PutPerformanceJSONBody defines parameters for PutPerformance.
type PutPerformanceJSONBody struct {
	union json.RawMessage
}

// GetRangeAvailabilityParams defines parameters for GetRangeAvailability.
type GetRangeAvailabilityParams struct {
	From  openapi_types.Date `form:"from" json:"from"`
	Until openapi_types.Date `form:"until" json:"until"`
	User  *float32           `form:"user,omitempty" json:"user,omitempty"`
}

// GetRangeInfoParams defines parameters for GetRangeInfo.
type GetRangeInfoParams struct {
	From     openapi_types.Date `form:"from" json:"from"`
	Until    openapi_types.Date `form:"until" json:"until"`
	Daily    *bool              `form:"daily,omitempty" json:"daily,omitempty"`
	Detailed *bool              `form:"detailed,omitempty" json:"detailed,omitempty"`
	Summary  *bool              `form:"summary,omitempty" json:"summary,omitempty"`
}

// GetTimesheetsParams defines parameters for GetTimesheets.
type GetTimesheetsParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize *PageSize                   `form:"page_size,omitempty" json:"page_size,omitempty"`
	Year     *float32                    `form:"year,omitempty" json:"year,omitempty"`
	YearGt   *float32                    `form:"year__gt,omitempty" json:"year__gt,omitempty"`
	YearGte  *float32                    `form:"year__gte,omitempty" json:"year__gte,omitempty"`
	YearLt   *float32                    `form:"year__lt,omitempty" json:"year__lt,omitempty"`
	YearLte  *float32                    `form:"year__lte,omitempty" json:"year__lte,omitempty"`
	Month    *float32                    `form:"month,omitempty" json:"month,omitempty"`
	MonthGt  *float32                    `form:"month__gt,omitempty" json:"month__gt,omitempty"`
	MonthGte *float32                    `form:"month__gte,omitempty" json:"month__gte,omitempty"`
	MonthLt  *float32                    `form:"month__lt,omitempty" json:"month__lt,omitempty"`
	MonthLte *float32                    `form:"month__lte,omitempty" json:"month__lte,omitempty"`
	Status   *string                     `form:"status,omitempty" json:"status,omitempty"`
	OrderBy  *GetTimesheetsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetTimesheetsParamsOrderBy defines parameters for GetTimesheets.
type GetTimesheetsParamsOrderBy string

// GetUsersParams defines parameters for GetUsers.
type GetUsersParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize               *PageSize              `form:"page_size,omitempty" json:"page_size,omitempty"`
	OrderBy                *GetUsersParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
	Username               *string                `form:"username,omitempty" json:"username,omitempty"`
	UsernameIcontains      *string                `form:"username__icontains,omitempty" json:"username__icontains,omitempty"`
	Email                  *string                `form:"email,omitempty" json:"email,omitempty"`
	EmailIcontains         *string                `form:"email__icontains,omitempty" json:"email__icontains,omitempty"`
	FirstName              *string                `form:"first_name,omitempty" json:"first_name,omitempty"`
	FirstNameIcontains     *string                `form:"first_name__icontains,omitempty" json:"first_name__icontains,omitempty"`
	LastName               *string                `form:"last_name,omitempty" json:"last_name,omitempty"`
	LastNameIcontains      *string                `form:"last_name__icontains,omitempty" json:"last_name__icontains,omitempty"`
	IsActive               *bool                  `form:"is_active,omitempty" json:"is_active,omitempty"`
	UserinfoBirthDate      *string                `form:"userinfo__birth_date,omitempty" json:"userinfo__birth_date,omitempty"`
	UserinfoBirthDateMonth *float32               `form:"userinfo__birth_date__month,omitempty" json:"userinfo__birth_date__month,omitempty"`
	UserinfoBirthDateDay   *float32               `form:"userinfo__birth_date__day,omitempty" json:"userinfo__birth_date__day,omitempty"`
}

// GetUsersParamsOrderBy defines parameters for GetUsers.
type GetUsersParamsOrderBy string

// GetWhereaboutsParams defines parameters for GetWhereabouts.
type GetWhereaboutsParams struct {
	// Page A page number within the paginated result set.
	Page *Page `form:"page,omitempty" json:"page,omitempty"`

	// PageSize Number of results to return per page.
	PageSize             *PageSize                    `form:"page_size,omitempty" json:"page_size,omitempty"`
	Location             *string                      `form:"location,omitempty" json:"location,omitempty"`
	Description          *string                      `form:"description,omitempty" json:"description,omitempty"`
	DescriptionIcontains *string                      `form:"description__icontains,omitempty" json:"description__icontains,omitempty"`
	StartsAtRange        *string                      `form:"starts_at__range,omitempty" json:"starts_at__range,omitempty"`
	OrderBy              *GetWhereaboutsParamsOrderBy `form:"order_by,omitempty" json:"order_by,omitempty"`
}

// GetWhereaboutsParamsOrderBy defines parameters for GetWhereabouts.
type GetWhereaboutsParamsOrderBy string

// PostAttachmentMultipartRequestBody defines body for PostAttachment for multipart/form-data ContentType.
type PostAttachmentMultipartRequestBody = AttachmentBody

// PutAttachmentMultipartRequestBody defines body for PutAttachment for multipart/form-data ContentType.
type PutAttachmentMultipartRequestBody = AttachmentBody

// PostLeaveJSONRequestBody defines body for PostLeave for application/json ContentType.
type PostLeaveJSONRequestBody = LeaveBody

// PutLeaveIdJSONRequestBody defines body for PutLeaveId for application/json ContentType.
type PutLeaveIdJSONRequestBody = LeaveBody

// PostPerformanceJSONRequestBody defines body for PostPerformance for application/json ContentType.
type PostPerformanceJSONRequestBody PostPerformanceJSONBody

// PutPerformanceJSONRequestBody defines body for PutPerformance for application/json ContentType.
type PutPerformanceJSONRequestBody PutPerformanceJSONBody

// PostTimesheetJSONRequestBody defines body for PostTimesheet for application/json ContentType.
type PostTimesheetJSONRequestBody = TimesheetBody

// PutTimesheetJSONRequestBody defines body for PutTimesheet for application/json ContentType.
type PutTimesheetJSONRequestBody = TimesheetBody

// PostWhereaboutJSONRequestBody defines body for PostWhereabout for application/json ContentType.
type PostWhereaboutJSONRequestBody = WhereaboutBody

// PutWhereaboutJSONRequestBody defines body for PutWhereabout for application/json ContentType.
type PutWhereaboutJSONRequestBody = WhereaboutBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAttachments request
	GetAttachments(ctx context.Context, params *GetAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAttachment request with any body
	PostAttachmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttachment request
	DeleteAttachment(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttachment request
	GetAttachment(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAttachment request with any body
	PutAttachmentWithBody(ctx context.Context, attachmentId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractRoles request
	GetContractRoles(ctx context.Context, params *GetContractRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractRole request
	GetContractRole(ctx context.Context, contractRoleId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractUsers request
	GetContractUsers(ctx context.Context, params *GetContractUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContractUser request
	GetContractUser(ctx context.Context, contractUserId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContracts request
	GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContract request
	GetContract(ctx context.Context, contractId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttachmentDownload request
	GetAttachmentDownload(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCompanyLogoDownload request
	GetCompanyLogoDownload(ctx context.Context, companyId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimesheetContractPdfDownload request
	GetTimesheetContractPdfDownload(ctx context.Context, timesheetId float32, contractId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaveFeed request
	GetLeaveFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyLeaveFeed request
	GetMyLeaveFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserLeaveFeed request
	GetUserLeaveFeed(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWhereaboutFeed request
	GetWhereaboutFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMyWhereaboutFeed request
	GetMyWhereaboutFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserWhereaboutFeed request
	GetUserWhereaboutFeed(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHolidays request
	GetHolidays(ctx context.Context, params *GetHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHoliday request
	GetHoliday(ctx context.Context, holidayId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerformanceImports request
	GetPerformanceImports(ctx context.Context, params *GetPerformanceImportsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeave request
	GetLeave(ctx context.Context, params *GetLeaveParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostLeave request with any body
	PostLeaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostLeave(ctx context.Context, body PostLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteLeaveId request
	DeleteLeaveId(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaveId request
	GetLeaveId(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutLeaveId request with any body
	PutLeaveIdWithBody(ctx context.Context, leaveId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutLeaveId(ctx context.Context, leaveId float32, body PutLeaveIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaveType request
	GetLeaveType(ctx context.Context, leaveTypeId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeaveTypes request
	GetLeaveTypes(ctx context.Context, params *GetLeaveTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocations request
	GetLocations(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLocation request
	GetLocation(ctx context.Context, locationId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerformanceTypes request
	GetPerformanceTypes(ctx context.Context, params *GetPerformanceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerformanceType request
	GetPerformanceType(ctx context.Context, performanceTypeId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerformances request
	GetPerformances(ctx context.Context, params *GetPerformancesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPerformance request with any body
	PostPerformanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPerformance(ctx context.Context, body PostPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePerformance request
	DeletePerformance(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPerformance request
	GetPerformance(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPerformance request with any body
	PutPerformanceWithBody(ctx context.Context, performanceId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPerformance(ctx context.Context, performanceId float32, body PutPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRangeAvailability request
	GetRangeAvailability(ctx context.Context, params *GetRangeAvailabilityParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRangeInfo request
	GetRangeInfo(ctx context.Context, params *GetRangeInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimesheets request
	GetTimesheets(ctx context.Context, params *GetTimesheetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTimesheet request with any body
	PostTimesheetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTimesheet(ctx context.Context, body PostTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTimesheet request
	DeleteTimesheet(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTimesheet request
	GetTimesheet(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTimesheet request with any body
	PutTimesheetWithBody(ctx context.Context, timesheetId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTimesheet(ctx context.Context, timesheetId float32, body PutTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUser request
	GetUser(ctx context.Context, userId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWhereabouts request
	GetWhereabouts(ctx context.Context, params *GetWhereaboutsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWhereabout request with any body
	PostWhereaboutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWhereabout(ctx context.Context, body PostWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWhereabout request
	DeleteWhereabout(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWhereabout request
	GetWhereabout(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWhereabout request with any body
	PutWhereaboutWithBody(ctx context.Context, whereaboutId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWhereabout(ctx context.Context, whereaboutId float32, body PutWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAttachments(ctx context.Context, params *GetAttachmentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttachmentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAttachmentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAttachmentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttachment(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttachmentRequest(c.Server, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttachment(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttachmentRequest(c.Server, attachmentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAttachmentWithBody(ctx context.Context, attachmentId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAttachmentRequestWithBody(c.Server, attachmentId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractRoles(ctx context.Context, params *GetContractRolesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractRolesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractRole(ctx context.Context, contractRoleId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractRoleRequest(c.Server, contractRoleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractUsers(ctx context.Context, params *GetContractUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContractUser(ctx context.Context, contractUserId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractUserRequest(c.Server, contractUserId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContracts(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContract(ctx context.Context, contractId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContractRequest(c.Server, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttachmentDownload(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttachmentDownloadRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCompanyLogoDownload(ctx context.Context, companyId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCompanyLogoDownloadRequest(c.Server, companyId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimesheetContractPdfDownload(ctx context.Context, timesheetId float32, contractId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimesheetContractPdfDownloadRequest(c.Server, timesheetId, contractId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaveFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaveFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyLeaveFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyLeaveFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserLeaveFeed(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserLeaveFeedRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWhereaboutFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWhereaboutFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMyWhereaboutFeed(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMyWhereaboutFeedRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserWhereaboutFeed(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserWhereaboutFeedRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHolidays(ctx context.Context, params *GetHolidaysParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHolidaysRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHoliday(ctx context.Context, holidayId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHolidayRequest(c.Server, holidayId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerformanceImports(ctx context.Context, params *GetPerformanceImportsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerformanceImportsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeave(ctx context.Context, params *GetLeaveParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaveRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLeaveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLeaveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostLeave(ctx context.Context, body PostLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostLeaveRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteLeaveId(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteLeaveIdRequest(c.Server, leaveId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaveId(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaveIdRequest(c.Server, leaveId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLeaveIdWithBody(ctx context.Context, leaveId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLeaveIdRequestWithBody(c.Server, leaveId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutLeaveId(ctx context.Context, leaveId float32, body PutLeaveIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutLeaveIdRequest(c.Server, leaveId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaveType(ctx context.Context, leaveTypeId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaveTypeRequest(c.Server, leaveTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeaveTypes(ctx context.Context, params *GetLeaveTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeaveTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocations(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLocation(ctx context.Context, locationId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLocationRequest(c.Server, locationId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerformanceTypes(ctx context.Context, params *GetPerformanceTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerformanceTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerformanceType(ctx context.Context, performanceTypeId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerformanceTypeRequest(c.Server, performanceTypeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerformances(ctx context.Context, params *GetPerformancesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerformancesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPerformanceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPerformanceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPerformance(ctx context.Context, body PostPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPerformanceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePerformance(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePerformanceRequest(c.Server, performanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPerformance(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPerformanceRequest(c.Server, performanceId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPerformanceWithBody(ctx context.Context, performanceId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPerformanceRequestWithBody(c.Server, performanceId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPerformance(ctx context.Context, performanceId float32, body PutPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPerformanceRequest(c.Server, performanceId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRangeAvailability(ctx context.Context, params *GetRangeAvailabilityParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRangeAvailabilityRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRangeInfo(ctx context.Context, params *GetRangeInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRangeInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimesheets(ctx context.Context, params *GetTimesheetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimesheetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimesheetWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimesheetRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTimesheet(ctx context.Context, body PostTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTimesheetRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTimesheet(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTimesheetRequest(c.Server, timesheetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTimesheet(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTimesheetRequest(c.Server, timesheetId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTimesheetWithBody(ctx context.Context, timesheetId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTimesheetRequestWithBody(c.Server, timesheetId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTimesheet(ctx context.Context, timesheetId float32, body PutTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTimesheetRequest(c.Server, timesheetId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUser(ctx context.Context, userId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWhereabouts(ctx context.Context, params *GetWhereaboutsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWhereaboutsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWhereaboutWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWhereaboutRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWhereabout(ctx context.Context, body PostWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWhereaboutRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWhereabout(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWhereaboutRequest(c.Server, whereaboutId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWhereabout(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWhereaboutRequest(c.Server, whereaboutId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWhereaboutWithBody(ctx context.Context, whereaboutId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWhereaboutRequestWithBody(c.Server, whereaboutId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWhereabout(ctx context.Context, whereaboutId float32, body PutWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWhereaboutRequest(c.Server, whereaboutId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAttachmentsRequest generates requests for GetAttachments
func NewGetAttachmentsRequest(server string, params *GetAttachmentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Name != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.NameIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Description != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DescriptionIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__icontains", runtime.ParamLocationQuery, *params.DescriptionIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Leave != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "leave", runtime.ParamLocationQuery, *params.Leave); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Timesheet != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timesheet", runtime.ParamLocationQuery, *params.Timesheet); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAttachmentRequestWithBody generates requests for PostAttachment with any type of body
func NewPostAttachmentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAttachmentRequest generates requests for DeleteAttachment
func NewDeleteAttachmentRequest(server string, attachmentId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttachmentRequest generates requests for GetAttachment
func NewGetAttachmentRequest(server string, attachmentId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAttachmentRequestWithBody generates requests for PutAttachment with any type of body
func NewPutAttachmentRequestWithBody(server string, attachmentId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attachmentId", runtime.ParamLocationPath, attachmentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attachments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContractRolesRequest generates requests for GetContractRoles
func NewGetContractRolesRequest(server string, params *GetContractRolesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contract_roles/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractRoleRequest generates requests for GetContractRole
func NewGetContractRoleRequest(server string, contractRoleId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractRoleId", runtime.ParamLocationPath, contractRoleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contract_roles/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractUsersRequest generates requests for GetContractUsers
func NewGetContractUsersRequest(server string, params *GetContractUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contract_users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Contract != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract", runtime.ParamLocationQuery, *params.Contract); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractUserRequest generates requests for GetContractUser
func NewGetContractUserRequest(server string, contractUserId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractUserId", runtime.ParamLocationPath, contractUserId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contract_users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractsRequest generates requests for GetContracts
func NewGetContractsRequest(server string, params *GetContractsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Name != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.NameIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Active != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "active", runtime.ParamLocationQuery, *params.Active); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Type != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContractRequest generates requests for GetContract
func NewGetContractRequest(server string, contractId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/contracts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttachmentDownloadRequest generates requests for GetAttachmentDownload
func NewGetAttachmentDownloadRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/downloads/attachments/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCompanyLogoDownloadRequest generates requests for GetCompanyLogoDownload
func NewGetCompanyLogoDownloadRequest(server string, companyId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "companyId", runtime.ParamLocationPath, companyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/downloads/company_logos/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimesheetContractPdfDownloadRequest generates requests for GetTimesheetContractPdfDownload
func NewGetTimesheetContractPdfDownloadRequest(server string, timesheetId float32, contractId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timesheetId", runtime.ParamLocationPath, timesheetId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "contractId", runtime.ParamLocationPath, contractId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/downloads/timesheet_contract_pdf/%s/%s/", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaveFeedRequest generates requests for GetLeaveFeed
func NewGetLeaveFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feeds/leave/all.ics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyLeaveFeedRequest generates requests for GetMyLeaveFeed
func NewGetMyLeaveFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feeds/leave/me.ics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserLeaveFeedRequest generates requests for GetUserLeaveFeed
func NewGetUserLeaveFeedRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feeds/leave/%s.ics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWhereaboutFeedRequest generates requests for GetWhereaboutFeed
func NewGetWhereaboutFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feeds/whereabouts/all.ics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMyWhereaboutFeedRequest generates requests for GetMyWhereaboutFeed
func NewGetMyWhereaboutFeedRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feeds/whereabouts/me.ics")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserWhereaboutFeedRequest generates requests for GetUserWhereaboutFeed
func NewGetUserWhereaboutFeedRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feeds/whereabouts/%s.ics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHolidaysRequest generates requests for GetHolidays
func NewGetHolidaysRequest(server string, params *GetHolidaysParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/holidays/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Name != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.NameIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__icontains", runtime.ParamLocationQuery, *params.NameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Date != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DateGt != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date__gt", runtime.ParamLocationQuery, *params.DateGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DateGte != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date__gte", runtime.ParamLocationQuery, *params.DateGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DateLt != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date__lt", runtime.ParamLocationQuery, *params.DateLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DateLte != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date__lte", runtime.ParamLocationQuery, *params.DateLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Country != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "country", runtime.ParamLocationQuery, *params.Country); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHolidayRequest generates requests for GetHoliday
func NewGetHolidayRequest(server string, holidayId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "holidayId", runtime.ParamLocationPath, holidayId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/holidays/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerformanceImportsRequest generates requests for GetPerformanceImports
func NewGetPerformanceImportsRequest(server string, params *GetPerformanceImportsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/imports/performances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, params.Until); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaveRequest generates requests for GetLeave
func NewGetLeaveRequest(server string, params *GetLeaveParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Status != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Description != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DescriptionIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__icontains", runtime.ParamLocationQuery, *params.DescriptionIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DateRange != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date__range", runtime.ParamLocationQuery, *params.DateRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostLeaveRequest calls the generic PostLeave builder with application/json body
func NewPostLeaveRequest(server string, body PostLeaveJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostLeaveRequestWithBody(server, "application/json", bodyReader)
}

// NewPostLeaveRequestWithBody generates requests for PostLeave with any type of body
func NewPostLeaveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteLeaveIdRequest generates requests for DeleteLeaveId
func NewDeleteLeaveIdRequest(server string, leaveId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "leaveId", runtime.ParamLocationPath, leaveId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaveIdRequest generates requests for GetLeaveId
func NewGetLeaveIdRequest(server string, leaveId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "leaveId", runtime.ParamLocationPath, leaveId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutLeaveIdRequest calls the generic PutLeaveId builder with application/json body
func NewPutLeaveIdRequest(server string, leaveId float32, body PutLeaveIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutLeaveIdRequestWithBody(server, leaveId, "application/json", bodyReader)
}

// NewPutLeaveIdRequestWithBody generates requests for PutLeaveId with any type of body
func NewPutLeaveIdRequestWithBody(server string, leaveId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "leaveId", runtime.ParamLocationPath, leaveId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLeaveTypeRequest generates requests for GetLeaveType
func NewGetLeaveTypeRequest(server string, leaveTypeId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "leaveTypeId", runtime.ParamLocationPath, leaveTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave_type/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLeaveTypesRequest generates requests for GetLeaveTypes
func NewGetLeaveTypesRequest(server string, params *GetLeaveTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/leave_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationsRequest generates requests for GetLocations
func NewGetLocationsRequest(server string, params *GetLocationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetLocationRequest generates requests for GetLocation
func NewGetLocationRequest(server string, locationId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "locationId", runtime.ParamLocationPath, locationId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/locations/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerformanceTypesRequest generates requests for GetPerformanceTypes
func NewGetPerformanceTypesRequest(server string, params *GetPerformanceTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performance_types/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerformanceTypeRequest generates requests for GetPerformanceType
func NewGetPerformanceTypeRequest(server string, performanceTypeId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "performanceTypeId", runtime.ParamLocationPath, performanceTypeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performance_types/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerformancesRequest generates requests for GetPerformances
func NewGetPerformancesRequest(server string, params *GetPerformancesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Date != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date", runtime.ParamLocationQuery, *params.Date); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DateRange != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "date__range", runtime.ParamLocationQuery, *params.DateRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Contract != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "contract", runtime.ParamLocationQuery, *params.Contract); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Type != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPerformanceRequest calls the generic PostPerformance builder with application/json body
func NewPostPerformanceRequest(server string, body PostPerformanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPerformanceRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPerformanceRequestWithBody generates requests for PostPerformance with any type of body
func NewPostPerformanceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performances/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePerformanceRequest generates requests for DeletePerformance
func NewDeletePerformanceRequest(server string, performanceId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "performanceId", runtime.ParamLocationPath, performanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPerformanceRequest generates requests for GetPerformance
func NewGetPerformanceRequest(server string, performanceId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "performanceId", runtime.ParamLocationPath, performanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPerformanceRequest calls the generic PutPerformance builder with application/json body
func NewPutPerformanceRequest(server string, performanceId float32, body PutPerformanceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPerformanceRequestWithBody(server, performanceId, "application/json", bodyReader)
}

// NewPutPerformanceRequestWithBody generates requests for PutPerformance with any type of body
func NewPutPerformanceRequestWithBody(server string, performanceId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "performanceId", runtime.ParamLocationPath, performanceId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/performances/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetRangeAvailabilityRequest generates requests for GetRangeAvailability
func NewGetRangeAvailabilityRequest(server string, params *GetRangeAvailabilityParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/range_availability/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, params.Until); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.User != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user", runtime.ParamLocationQuery, *params.User); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRangeInfoRequest generates requests for GetRangeInfo
func NewGetRangeInfoRequest(server string, params *GetRangeInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/range_info/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, params.From); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "until", runtime.ParamLocationQuery, params.Until); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if params.Daily != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "daily", runtime.ParamLocationQuery, *params.Daily); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Detailed != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "detailed", runtime.ParamLocationQuery, *params.Detailed); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Summary != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summary", runtime.ParamLocationQuery, *params.Summary); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimesheetsRequest generates requests for GetTimesheets
func NewGetTimesheetsRequest(server string, params *GetTimesheetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timesheets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Year != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, *params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.YearGt != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year__gt", runtime.ParamLocationQuery, *params.YearGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.YearGte != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year__gte", runtime.ParamLocationQuery, *params.YearGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.YearLt != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year__lt", runtime.ParamLocationQuery, *params.YearLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.YearLte != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year__lte", runtime.ParamLocationQuery, *params.YearLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Month != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month", runtime.ParamLocationQuery, *params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.MonthGt != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month__gt", runtime.ParamLocationQuery, *params.MonthGt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.MonthGte != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month__gte", runtime.ParamLocationQuery, *params.MonthGte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.MonthLt != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month__lt", runtime.ParamLocationQuery, *params.MonthLt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.MonthLte != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month__lte", runtime.ParamLocationQuery, *params.MonthLte); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Status != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTimesheetRequest calls the generic PostTimesheet builder with application/json body
func NewPostTimesheetRequest(server string, body PostTimesheetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTimesheetRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTimesheetRequestWithBody generates requests for PostTimesheet with any type of body
func NewPostTimesheetRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timesheets/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTimesheetRequest generates requests for DeleteTimesheet
func NewDeleteTimesheetRequest(server string, timesheetId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timesheetId", runtime.ParamLocationPath, timesheetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timesheets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTimesheetRequest generates requests for GetTimesheet
func NewGetTimesheetRequest(server string, timesheetId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timesheetId", runtime.ParamLocationPath, timesheetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timesheets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTimesheetRequest calls the generic PutTimesheet builder with application/json body
func NewPutTimesheetRequest(server string, timesheetId float32, body PutTimesheetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTimesheetRequestWithBody(server, timesheetId, "application/json", bodyReader)
}

// NewPutTimesheetRequestWithBody generates requests for PutTimesheet with any type of body
func NewPutTimesheetRequestWithBody(server string, timesheetId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "timesheetId", runtime.ParamLocationPath, timesheetId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/timesheets/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string, params *GetUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Username != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, *params.Username); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.UsernameIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username__icontains", runtime.ParamLocationQuery, *params.UsernameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Email != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.EmailIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email__icontains", runtime.ParamLocationQuery, *params.EmailIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.FirstName != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name", runtime.ParamLocationQuery, *params.FirstName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.FirstNameIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "first_name__icontains", runtime.ParamLocationQuery, *params.FirstNameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.LastName != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name", runtime.ParamLocationQuery, *params.LastName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.LastNameIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_name__icontains", runtime.ParamLocationQuery, *params.LastNameIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.IsActive != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "is_active", runtime.ParamLocationQuery, *params.IsActive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.UserinfoBirthDate != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userinfo__birth_date", runtime.ParamLocationQuery, *params.UserinfoBirthDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.UserinfoBirthDateMonth != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userinfo__birth_date__month", runtime.ParamLocationQuery, *params.UserinfoBirthDateMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.UserinfoBirthDateDay != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userinfo__birth_date__day", runtime.ParamLocationQuery, *params.UserinfoBirthDateDay); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, userId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWhereaboutsRequest generates requests for GetWhereabouts
func NewGetWhereaboutsRequest(server string, params *GetWhereaboutsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/whereabouts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Page != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.PageSize != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_size", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Location != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "location", runtime.ParamLocationQuery, *params.Location); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.Description != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.DescriptionIcontains != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__icontains", runtime.ParamLocationQuery, *params.DescriptionIcontains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.StartsAtRange != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "starts_at__range", runtime.ParamLocationQuery, *params.StartsAtRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	if params.OrderBy != nil {
		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "order_by", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWhereaboutRequest calls the generic PostWhereabout builder with application/json body
func NewPostWhereaboutRequest(server string, body PostWhereaboutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWhereaboutRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWhereaboutRequestWithBody generates requests for PostWhereabout with any type of body
func NewPostWhereaboutRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/whereabouts/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWhereaboutRequest generates requests for DeleteWhereabout
func NewDeleteWhereaboutRequest(server string, whereaboutId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "whereaboutId", runtime.ParamLocationPath, whereaboutId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/whereabouts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWhereaboutRequest generates requests for GetWhereabout
func NewGetWhereaboutRequest(server string, whereaboutId float32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "whereaboutId", runtime.ParamLocationPath, whereaboutId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/whereabouts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWhereaboutRequest calls the generic PutWhereabout builder with application/json body
func NewPutWhereaboutRequest(server string, whereaboutId float32, body PutWhereaboutJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWhereaboutRequestWithBody(server, whereaboutId, "application/json", bodyReader)
}

// NewPutWhereaboutRequestWithBody generates requests for PutWhereabout with any type of body
func NewPutWhereaboutRequestWithBody(server string, whereaboutId float32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "whereaboutId", runtime.ParamLocationPath, whereaboutId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/whereabouts/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAttachments request
	GetAttachmentsWithResponse(ctx context.Context, params *GetAttachmentsParams, reqEditors ...RequestEditorFn) (*GetAttachmentsResponse, error)

	// PostAttachment request with any body
	PostAttachmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentResponse, error)

	// DeleteAttachment request
	DeleteAttachmentWithResponse(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*DeleteAttachmentResponse, error)

	// GetAttachment request
	GetAttachmentWithResponse(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*GetAttachmentResponse, error)

	// PutAttachment request with any body
	PutAttachmentWithBodyWithResponse(ctx context.Context, attachmentId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAttachmentResponse, error)

	// GetContractRoles request
	GetContractRolesWithResponse(ctx context.Context, params *GetContractRolesParams, reqEditors ...RequestEditorFn) (*GetContractRolesResponse, error)

	// GetContractRole request
	GetContractRoleWithResponse(ctx context.Context, contractRoleId float32, reqEditors ...RequestEditorFn) (*GetContractRoleResponse, error)

	// GetContractUsers request
	GetContractUsersWithResponse(ctx context.Context, params *GetContractUsersParams, reqEditors ...RequestEditorFn) (*GetContractUsersResponse, error)

	// GetContractUser request
	GetContractUserWithResponse(ctx context.Context, contractUserId float32, reqEditors ...RequestEditorFn) (*GetContractUserResponse, error)

	// GetContracts request
	GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error)

	// GetContract request
	GetContractWithResponse(ctx context.Context, contractId float32, reqEditors ...RequestEditorFn) (*GetContractResponse, error)

	// GetAttachmentDownload request
	GetAttachmentDownloadWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*GetAttachmentDownloadResponse, error)

	// GetCompanyLogoDownload request
	GetCompanyLogoDownloadWithResponse(ctx context.Context, companyId float32, reqEditors ...RequestEditorFn) (*GetCompanyLogoDownloadResponse, error)

	// GetTimesheetContractPdfDownload request
	GetTimesheetContractPdfDownloadWithResponse(ctx context.Context, timesheetId float32, contractId float32, reqEditors ...RequestEditorFn) (*GetTimesheetContractPdfDownloadResponse, error)

	// GetLeaveFeed request
	GetLeaveFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLeaveFeedResponse, error)

	// GetMyLeaveFeed request
	GetMyLeaveFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyLeaveFeedResponse, error)

	// GetUserLeaveFeed request
	GetUserLeaveFeedWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserLeaveFeedResponse, error)

	// GetWhereaboutFeed request
	GetWhereaboutFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWhereaboutFeedResponse, error)

	// GetMyWhereaboutFeed request
	GetMyWhereaboutFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyWhereaboutFeedResponse, error)

	// GetUserWhereaboutFeed request
	GetUserWhereaboutFeedWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserWhereaboutFeedResponse, error)

	// GetHolidays request
	GetHolidaysWithResponse(ctx context.Context, params *GetHolidaysParams, reqEditors ...RequestEditorFn) (*GetHolidaysResponse, error)

	// GetHoliday request
	GetHolidayWithResponse(ctx context.Context, holidayId float32, reqEditors ...RequestEditorFn) (*GetHolidayResponse, error)

	// GetPerformanceImports request
	GetPerformanceImportsWithResponse(ctx context.Context, params *GetPerformanceImportsParams, reqEditors ...RequestEditorFn) (*GetPerformanceImportsResponse, error)

	// GetLeave request
	GetLeaveWithResponse(ctx context.Context, params *GetLeaveParams, reqEditors ...RequestEditorFn) (*GetLeaveResponse, error)

	// PostLeave request with any body
	PostLeaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLeaveResponse, error)

	PostLeaveWithResponse(ctx context.Context, body PostLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLeaveResponse, error)

	// DeleteLeaveId request
	DeleteLeaveIdWithResponse(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*DeleteLeaveIdResponse, error)

	// GetLeaveId request
	GetLeaveIdWithResponse(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*GetLeaveIdResponse, error)

	// PutLeaveId request with any body
	PutLeaveIdWithBodyWithResponse(ctx context.Context, leaveId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLeaveIdResponse, error)

	PutLeaveIdWithResponse(ctx context.Context, leaveId float32, body PutLeaveIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLeaveIdResponse, error)

	// GetLeaveType request
	GetLeaveTypeWithResponse(ctx context.Context, leaveTypeId float32, reqEditors ...RequestEditorFn) (*GetLeaveTypeResponse, error)

	// GetLeaveTypes request
	GetLeaveTypesWithResponse(ctx context.Context, params *GetLeaveTypesParams, reqEditors ...RequestEditorFn) (*GetLeaveTypesResponse, error)

	// GetLocations request
	GetLocationsWithResponse(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*GetLocationsResponse, error)

	// GetLocation request
	GetLocationWithResponse(ctx context.Context, locationId float32, reqEditors ...RequestEditorFn) (*GetLocationResponse, error)

	// GetMe request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// GetPerformanceTypes request
	GetPerformanceTypesWithResponse(ctx context.Context, params *GetPerformanceTypesParams, reqEditors ...RequestEditorFn) (*GetPerformanceTypesResponse, error)

	// GetPerformanceType request
	GetPerformanceTypeWithResponse(ctx context.Context, performanceTypeId float32, reqEditors ...RequestEditorFn) (*GetPerformanceTypeResponse, error)

	// GetPerformances request
	GetPerformancesWithResponse(ctx context.Context, params *GetPerformancesParams, reqEditors ...RequestEditorFn) (*GetPerformancesResponse, error)

	// PostPerformance request with any body
	PostPerformanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPerformanceResponse, error)

	PostPerformanceWithResponse(ctx context.Context, body PostPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPerformanceResponse, error)

	// DeletePerformance request
	DeletePerformanceWithResponse(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*DeletePerformanceResponse, error)

	// GetPerformance request
	GetPerformanceWithResponse(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*GetPerformanceResponse, error)

	// PutPerformance request with any body
	PutPerformanceWithBodyWithResponse(ctx context.Context, performanceId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPerformanceResponse, error)

	PutPerformanceWithResponse(ctx context.Context, performanceId float32, body PutPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPerformanceResponse, error)

	// GetRangeAvailability request
	GetRangeAvailabilityWithResponse(ctx context.Context, params *GetRangeAvailabilityParams, reqEditors ...RequestEditorFn) (*GetRangeAvailabilityResponse, error)

	// GetRangeInfo request
	GetRangeInfoWithResponse(ctx context.Context, params *GetRangeInfoParams, reqEditors ...RequestEditorFn) (*GetRangeInfoResponse, error)

	// GetTimesheets request
	GetTimesheetsWithResponse(ctx context.Context, params *GetTimesheetsParams, reqEditors ...RequestEditorFn) (*GetTimesheetsResponse, error)

	// PostTimesheet request with any body
	PostTimesheetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimesheetResponse, error)

	PostTimesheetWithResponse(ctx context.Context, body PostTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimesheetResponse, error)

	// DeleteTimesheet request
	DeleteTimesheetWithResponse(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*DeleteTimesheetResponse, error)

	// GetTimesheet request
	GetTimesheetWithResponse(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*GetTimesheetResponse, error)

	// PutTimesheet request with any body
	PutTimesheetWithBodyWithResponse(ctx context.Context, timesheetId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTimesheetResponse, error)

	PutTimesheetWithResponse(ctx context.Context, timesheetId float32, body PutTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTimesheetResponse, error)

	// GetUsers request
	GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// GetUser request
	GetUserWithResponse(ctx context.Context, userId float32, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetWhereabouts request
	GetWhereaboutsWithResponse(ctx context.Context, params *GetWhereaboutsParams, reqEditors ...RequestEditorFn) (*GetWhereaboutsResponse, error)

	// PostWhereabout request with any body
	PostWhereaboutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWhereaboutResponse, error)

	PostWhereaboutWithResponse(ctx context.Context, body PostWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWhereaboutResponse, error)

	// DeleteWhereabout request
	DeleteWhereaboutWithResponse(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*DeleteWhereaboutResponse, error)

	// GetWhereabout request
	GetWhereaboutWithResponse(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*GetWhereaboutResponse, error)

	// PutWhereabout request with any body
	PutWhereaboutWithBodyWithResponse(ctx context.Context, whereaboutId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWhereaboutResponse, error)

	PutWhereaboutWithResponse(ctx context.Context, whereaboutId float32, body PutWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWhereaboutResponse, error)
}

type GetAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32      `json:"count,omitempty"`
		Next     *string       `json:"next"`
		Previous *string       `json:"previous"`
		Results  *[]Attachment `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Attachment
}

// Status returns HTTPResponse.Status
func (r PostAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attachment
}

// Status returns HTTPResponse.Status
func (r GetAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attachment
}

// Status returns HTTPResponse.Status
func (r PutAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32        `json:"count,omitempty"`
		Next     *string         `json:"next"`
		Previous *string         `json:"previous"`
		Results  *[]ContractRole `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractRole
}

// Status returns HTTPResponse.Status
func (r GetContractRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32        `json:"count,omitempty"`
		Next     *string         `json:"next"`
		Previous *string         `json:"previous"`
		Results  *[]ContractUser `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetContractUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContractUser
}

// Status returns HTTPResponse.Status
func (r GetContractUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetContractsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContractResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Contract
}

// Status returns HTTPResponse.Status
func (r GetContractResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContractResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttachmentDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetAttachmentDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttachmentDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCompanyLogoDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetCompanyLogoDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCompanyLogoDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimesheetContractPdfDownloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetTimesheetContractPdfDownloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimesheetContractPdfDownloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaveFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetLeaveFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaveFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyLeaveFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetMyLeaveFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyLeaveFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserLeaveFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetUserLeaveFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserLeaveFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWhereaboutFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetWhereaboutFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWhereaboutFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMyWhereaboutFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetMyWhereaboutFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMyWhereaboutFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserWhereaboutFeedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.File
}

// Status returns HTTPResponse.Status
func (r GetUserWhereaboutFeedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserWhereaboutFeedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHolidaysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32   `json:"count,omitempty"`
		Next     *string    `json:"next"`
		Previous *string    `json:"previous"`
		Results  *[]Holiday `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHolidaysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHolidaysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHolidayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Holiday
}

// Status returns HTTPResponse.Status
func (r GetHolidayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHolidayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerformanceImportsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32                       `json:"count,omitempty"`
		Next     *string                        `json:"next"`
		Previous *string                        `json:"previous"`
		Results  *[]PerformanceImportSuggestion `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPerformanceImportsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerformanceImportsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32 `json:"count,omitempty"`
		Next     *string  `json:"next"`
		Previous *string  `json:"previous"`
		Results  *[]Leave `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostLeaveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Leave
}

// Status returns HTTPResponse.Status
func (r PostLeaveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostLeaveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteLeaveIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteLeaveIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteLeaveIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaveIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Leave
}

// Status returns HTTPResponse.Status
func (r GetLeaveIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaveIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutLeaveIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Leave
}

// Status returns HTTPResponse.Status
func (r PutLeaveIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutLeaveIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaveTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LeaveType
}

// Status returns HTTPResponse.Status
func (r GetLeaveTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaveTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeaveTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32     `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]LeaveType `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLeaveTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeaveTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32    `json:"count,omitempty"`
		Next     *string     `json:"next"`
		Previous *string     `json:"previous"`
		Results  *[]Location `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetLocationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLocationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Location
}

// Status returns HTTPResponse.Status
func (r GetLocationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLocationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Me
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerformanceTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32           `json:"count,omitempty"`
		Next     *string            `json:"next"`
		Previous *string            `json:"previous"`
		Results  *[]PerformanceType `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPerformanceTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerformanceTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerformanceTypeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PerformanceType
}

// Status returns HTTPResponse.Status
func (r GetPerformanceTypeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerformanceTypeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerformancesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetPerformancesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerformancesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPerformanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PostPerformanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPerformanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePerformanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePerformanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePerformanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPerformanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r GetPerformanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPerformanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPerformanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		union json.RawMessage
	}
}

// Status returns HTTPResponse.Status
func (r PutPerformanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPerformanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRangeAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRangeAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRangeAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRangeInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r GetRangeInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRangeInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimesheetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32     `json:"count,omitempty"`
		Next     *string      `json:"next"`
		Previous *string      `json:"previous"`
		Results  *[]Timesheet `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetTimesheetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimesheetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTimesheetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Timesheet
}

// Status returns HTTPResponse.Status
func (r PostTimesheetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTimesheetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTimesheetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTimesheetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTimesheetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTimesheetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Timesheet
}

// Status returns HTTPResponse.Status
func (r GetTimesheetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTimesheetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTimesheetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Timesheet
}

// Status returns HTTPResponse.Status
func (r PutTimesheetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTimesheetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32 `json:"count,omitempty"`
		Next     *string  `json:"next"`
		Previous *string  `json:"previous"`
		Results  *[]User  `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWhereaboutsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Count    *float32      `json:"count,omitempty"`
		Next     *string       `json:"next"`
		Previous *string       `json:"previous"`
		Results  *[]Whereabout `json:"results,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetWhereaboutsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWhereaboutsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWhereaboutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Whereabout
}

// Status returns HTTPResponse.Status
func (r PostWhereaboutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWhereaboutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWhereaboutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWhereaboutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWhereaboutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWhereaboutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Whereabout
}

// Status returns HTTPResponse.Status
func (r GetWhereaboutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWhereaboutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWhereaboutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Whereabout
}

// Status returns HTTPResponse.Status
func (r PutWhereaboutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWhereaboutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAttachmentsWithResponse request returning *GetAttachmentsResponse
func (c *ClientWithResponses) GetAttachmentsWithResponse(ctx context.Context, params *GetAttachmentsParams, reqEditors ...RequestEditorFn) (*GetAttachmentsResponse, error) {
	rsp, err := c.GetAttachments(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentsResponse(rsp)
}

// PostAttachmentWithBodyWithResponse request with arbitrary body returning *PostAttachmentResponse
func (c *ClientWithResponses) PostAttachmentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAttachmentResponse, error) {
	rsp, err := c.PostAttachmentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAttachmentResponse(rsp)
}

// DeleteAttachmentWithResponse request returning *DeleteAttachmentResponse
func (c *ClientWithResponses) DeleteAttachmentWithResponse(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*DeleteAttachmentResponse, error) {
	rsp, err := c.DeleteAttachment(ctx, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttachmentResponse(rsp)
}

// GetAttachmentWithResponse request returning *GetAttachmentResponse
func (c *ClientWithResponses) GetAttachmentWithResponse(ctx context.Context, attachmentId float32, reqEditors ...RequestEditorFn) (*GetAttachmentResponse, error) {
	rsp, err := c.GetAttachment(ctx, attachmentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentResponse(rsp)
}

// PutAttachmentWithBodyWithResponse request with arbitrary body returning *PutAttachmentResponse
func (c *ClientWithResponses) PutAttachmentWithBodyWithResponse(ctx context.Context, attachmentId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAttachmentResponse, error) {
	rsp, err := c.PutAttachmentWithBody(ctx, attachmentId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAttachmentResponse(rsp)
}

// GetContractRolesWithResponse request returning *GetContractRolesResponse
func (c *ClientWithResponses) GetContractRolesWithResponse(ctx context.Context, params *GetContractRolesParams, reqEditors ...RequestEditorFn) (*GetContractRolesResponse, error) {
	rsp, err := c.GetContractRoles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractRolesResponse(rsp)
}

// GetContractRoleWithResponse request returning *GetContractRoleResponse
func (c *ClientWithResponses) GetContractRoleWithResponse(ctx context.Context, contractRoleId float32, reqEditors ...RequestEditorFn) (*GetContractRoleResponse, error) {
	rsp, err := c.GetContractRole(ctx, contractRoleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractRoleResponse(rsp)
}

// GetContractUsersWithResponse request returning *GetContractUsersResponse
func (c *ClientWithResponses) GetContractUsersWithResponse(ctx context.Context, params *GetContractUsersParams, reqEditors ...RequestEditorFn) (*GetContractUsersResponse, error) {
	rsp, err := c.GetContractUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractUsersResponse(rsp)
}

// GetContractUserWithResponse request returning *GetContractUserResponse
func (c *ClientWithResponses) GetContractUserWithResponse(ctx context.Context, contractUserId float32, reqEditors ...RequestEditorFn) (*GetContractUserResponse, error) {
	rsp, err := c.GetContractUser(ctx, contractUserId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractUserResponse(rsp)
}

// GetContractsWithResponse request returning *GetContractsResponse
func (c *ClientWithResponses) GetContractsWithResponse(ctx context.Context, params *GetContractsParams, reqEditors ...RequestEditorFn) (*GetContractsResponse, error) {
	rsp, err := c.GetContracts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractsResponse(rsp)
}

// GetContractWithResponse request returning *GetContractResponse
func (c *ClientWithResponses) GetContractWithResponse(ctx context.Context, contractId float32, reqEditors ...RequestEditorFn) (*GetContractResponse, error) {
	rsp, err := c.GetContract(ctx, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetContractResponse(rsp)
}

// GetAttachmentDownloadWithResponse request returning *GetAttachmentDownloadResponse
func (c *ClientWithResponses) GetAttachmentDownloadWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*GetAttachmentDownloadResponse, error) {
	rsp, err := c.GetAttachmentDownload(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttachmentDownloadResponse(rsp)
}

// GetCompanyLogoDownloadWithResponse request returning *GetCompanyLogoDownloadResponse
func (c *ClientWithResponses) GetCompanyLogoDownloadWithResponse(ctx context.Context, companyId float32, reqEditors ...RequestEditorFn) (*GetCompanyLogoDownloadResponse, error) {
	rsp, err := c.GetCompanyLogoDownload(ctx, companyId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCompanyLogoDownloadResponse(rsp)
}

// GetTimesheetContractPdfDownloadWithResponse request returning *GetTimesheetContractPdfDownloadResponse
func (c *ClientWithResponses) GetTimesheetContractPdfDownloadWithResponse(ctx context.Context, timesheetId float32, contractId float32, reqEditors ...RequestEditorFn) (*GetTimesheetContractPdfDownloadResponse, error) {
	rsp, err := c.GetTimesheetContractPdfDownload(ctx, timesheetId, contractId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimesheetContractPdfDownloadResponse(rsp)
}

// GetLeaveFeedWithResponse request returning *GetLeaveFeedResponse
func (c *ClientWithResponses) GetLeaveFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetLeaveFeedResponse, error) {
	rsp, err := c.GetLeaveFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaveFeedResponse(rsp)
}

// GetMyLeaveFeedWithResponse request returning *GetMyLeaveFeedResponse
func (c *ClientWithResponses) GetMyLeaveFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyLeaveFeedResponse, error) {
	rsp, err := c.GetMyLeaveFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyLeaveFeedResponse(rsp)
}

// GetUserLeaveFeedWithResponse request returning *GetUserLeaveFeedResponse
func (c *ClientWithResponses) GetUserLeaveFeedWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserLeaveFeedResponse, error) {
	rsp, err := c.GetUserLeaveFeed(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserLeaveFeedResponse(rsp)
}

// GetWhereaboutFeedWithResponse request returning *GetWhereaboutFeedResponse
func (c *ClientWithResponses) GetWhereaboutFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWhereaboutFeedResponse, error) {
	rsp, err := c.GetWhereaboutFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWhereaboutFeedResponse(rsp)
}

// GetMyWhereaboutFeedWithResponse request returning *GetMyWhereaboutFeedResponse
func (c *ClientWithResponses) GetMyWhereaboutFeedWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMyWhereaboutFeedResponse, error) {
	rsp, err := c.GetMyWhereaboutFeed(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMyWhereaboutFeedResponse(rsp)
}

// GetUserWhereaboutFeedWithResponse request returning *GetUserWhereaboutFeedResponse
func (c *ClientWithResponses) GetUserWhereaboutFeedWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserWhereaboutFeedResponse, error) {
	rsp, err := c.GetUserWhereaboutFeed(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserWhereaboutFeedResponse(rsp)
}

// GetHolidaysWithResponse request returning *GetHolidaysResponse
func (c *ClientWithResponses) GetHolidaysWithResponse(ctx context.Context, params *GetHolidaysParams, reqEditors ...RequestEditorFn) (*GetHolidaysResponse, error) {
	rsp, err := c.GetHolidays(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHolidaysResponse(rsp)
}

// GetHolidayWithResponse request returning *GetHolidayResponse
func (c *ClientWithResponses) GetHolidayWithResponse(ctx context.Context, holidayId float32, reqEditors ...RequestEditorFn) (*GetHolidayResponse, error) {
	rsp, err := c.GetHoliday(ctx, holidayId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHolidayResponse(rsp)
}

// GetPerformanceImportsWithResponse request returning *GetPerformanceImportsResponse
func (c *ClientWithResponses) GetPerformanceImportsWithResponse(ctx context.Context, params *GetPerformanceImportsParams, reqEditors ...RequestEditorFn) (*GetPerformanceImportsResponse, error) {
	rsp, err := c.GetPerformanceImports(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerformanceImportsResponse(rsp)
}

// GetLeaveWithResponse request returning *GetLeaveResponse
func (c *ClientWithResponses) GetLeaveWithResponse(ctx context.Context, params *GetLeaveParams, reqEditors ...RequestEditorFn) (*GetLeaveResponse, error) {
	rsp, err := c.GetLeave(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaveResponse(rsp)
}

// PostLeaveWithBodyWithResponse request with arbitrary body returning *PostLeaveResponse
func (c *ClientWithResponses) PostLeaveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostLeaveResponse, error) {
	rsp, err := c.PostLeaveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLeaveResponse(rsp)
}

func (c *ClientWithResponses) PostLeaveWithResponse(ctx context.Context, body PostLeaveJSONRequestBody, reqEditors ...RequestEditorFn) (*PostLeaveResponse, error) {
	rsp, err := c.PostLeave(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostLeaveResponse(rsp)
}

// DeleteLeaveIdWithResponse request returning *DeleteLeaveIdResponse
func (c *ClientWithResponses) DeleteLeaveIdWithResponse(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*DeleteLeaveIdResponse, error) {
	rsp, err := c.DeleteLeaveId(ctx, leaveId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteLeaveIdResponse(rsp)
}

// GetLeaveIdWithResponse request returning *GetLeaveIdResponse
func (c *ClientWithResponses) GetLeaveIdWithResponse(ctx context.Context, leaveId float32, reqEditors ...RequestEditorFn) (*GetLeaveIdResponse, error) {
	rsp, err := c.GetLeaveId(ctx, leaveId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaveIdResponse(rsp)
}

// PutLeaveIdWithBodyWithResponse request with arbitrary body returning *PutLeaveIdResponse
func (c *ClientWithResponses) PutLeaveIdWithBodyWithResponse(ctx context.Context, leaveId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutLeaveIdResponse, error) {
	rsp, err := c.PutLeaveIdWithBody(ctx, leaveId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLeaveIdResponse(rsp)
}

func (c *ClientWithResponses) PutLeaveIdWithResponse(ctx context.Context, leaveId float32, body PutLeaveIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutLeaveIdResponse, error) {
	rsp, err := c.PutLeaveId(ctx, leaveId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutLeaveIdResponse(rsp)
}

// GetLeaveTypeWithResponse request returning *GetLeaveTypeResponse
func (c *ClientWithResponses) GetLeaveTypeWithResponse(ctx context.Context, leaveTypeId float32, reqEditors ...RequestEditorFn) (*GetLeaveTypeResponse, error) {
	rsp, err := c.GetLeaveType(ctx, leaveTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaveTypeResponse(rsp)
}

// GetLeaveTypesWithResponse request returning *GetLeaveTypesResponse
func (c *ClientWithResponses) GetLeaveTypesWithResponse(ctx context.Context, params *GetLeaveTypesParams, reqEditors ...RequestEditorFn) (*GetLeaveTypesResponse, error) {
	rsp, err := c.GetLeaveTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeaveTypesResponse(rsp)
}

// GetLocationsWithResponse request returning *GetLocationsResponse
func (c *ClientWithResponses) GetLocationsWithResponse(ctx context.Context, params *GetLocationsParams, reqEditors ...RequestEditorFn) (*GetLocationsResponse, error) {
	rsp, err := c.GetLocations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationsResponse(rsp)
}

// GetLocationWithResponse request returning *GetLocationResponse
func (c *ClientWithResponses) GetLocationWithResponse(ctx context.Context, locationId float32, reqEditors ...RequestEditorFn) (*GetLocationResponse, error) {
	rsp, err := c.GetLocation(ctx, locationId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLocationResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// GetPerformanceTypesWithResponse request returning *GetPerformanceTypesResponse
func (c *ClientWithResponses) GetPerformanceTypesWithResponse(ctx context.Context, params *GetPerformanceTypesParams, reqEditors ...RequestEditorFn) (*GetPerformanceTypesResponse, error) {
	rsp, err := c.GetPerformanceTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerformanceTypesResponse(rsp)
}

// GetPerformanceTypeWithResponse request returning *GetPerformanceTypeResponse
func (c *ClientWithResponses) GetPerformanceTypeWithResponse(ctx context.Context, performanceTypeId float32, reqEditors ...RequestEditorFn) (*GetPerformanceTypeResponse, error) {
	rsp, err := c.GetPerformanceType(ctx, performanceTypeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerformanceTypeResponse(rsp)
}

// GetPerformancesWithResponse request returning *GetPerformancesResponse
func (c *ClientWithResponses) GetPerformancesWithResponse(ctx context.Context, params *GetPerformancesParams, reqEditors ...RequestEditorFn) (*GetPerformancesResponse, error) {
	rsp, err := c.GetPerformances(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerformancesResponse(rsp)
}

// PostPerformanceWithBodyWithResponse request with arbitrary body returning *PostPerformanceResponse
func (c *ClientWithResponses) PostPerformanceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPerformanceResponse, error) {
	rsp, err := c.PostPerformanceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPerformanceResponse(rsp)
}

func (c *ClientWithResponses) PostPerformanceWithResponse(ctx context.Context, body PostPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPerformanceResponse, error) {
	rsp, err := c.PostPerformance(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPerformanceResponse(rsp)
}

// DeletePerformanceWithResponse request returning *DeletePerformanceResponse
func (c *ClientWithResponses) DeletePerformanceWithResponse(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*DeletePerformanceResponse, error) {
	rsp, err := c.DeletePerformance(ctx, performanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePerformanceResponse(rsp)
}

// GetPerformanceWithResponse request returning *GetPerformanceResponse
func (c *ClientWithResponses) GetPerformanceWithResponse(ctx context.Context, performanceId float32, reqEditors ...RequestEditorFn) (*GetPerformanceResponse, error) {
	rsp, err := c.GetPerformance(ctx, performanceId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPerformanceResponse(rsp)
}

// PutPerformanceWithBodyWithResponse request with arbitrary body returning *PutPerformanceResponse
func (c *ClientWithResponses) PutPerformanceWithBodyWithResponse(ctx context.Context, performanceId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPerformanceResponse, error) {
	rsp, err := c.PutPerformanceWithBody(ctx, performanceId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPerformanceResponse(rsp)
}

func (c *ClientWithResponses) PutPerformanceWithResponse(ctx context.Context, performanceId float32, body PutPerformanceJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPerformanceResponse, error) {
	rsp, err := c.PutPerformance(ctx, performanceId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPerformanceResponse(rsp)
}

// GetRangeAvailabilityWithResponse request returning *GetRangeAvailabilityResponse
func (c *ClientWithResponses) GetRangeAvailabilityWithResponse(ctx context.Context, params *GetRangeAvailabilityParams, reqEditors ...RequestEditorFn) (*GetRangeAvailabilityResponse, error) {
	rsp, err := c.GetRangeAvailability(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRangeAvailabilityResponse(rsp)
}

// GetRangeInfoWithResponse request returning *GetRangeInfoResponse
func (c *ClientWithResponses) GetRangeInfoWithResponse(ctx context.Context, params *GetRangeInfoParams, reqEditors ...RequestEditorFn) (*GetRangeInfoResponse, error) {
	rsp, err := c.GetRangeInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRangeInfoResponse(rsp)
}

// GetTimesheetsWithResponse request returning *GetTimesheetsResponse
func (c *ClientWithResponses) GetTimesheetsWithResponse(ctx context.Context, params *GetTimesheetsParams, reqEditors ...RequestEditorFn) (*GetTimesheetsResponse, error) {
	rsp, err := c.GetTimesheets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimesheetsResponse(rsp)
}

// PostTimesheetWithBodyWithResponse request with arbitrary body returning *PostTimesheetResponse
func (c *ClientWithResponses) PostTimesheetWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTimesheetResponse, error) {
	rsp, err := c.PostTimesheetWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimesheetResponse(rsp)
}

func (c *ClientWithResponses) PostTimesheetWithResponse(ctx context.Context, body PostTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTimesheetResponse, error) {
	rsp, err := c.PostTimesheet(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTimesheetResponse(rsp)
}

// DeleteTimesheetWithResponse request returning *DeleteTimesheetResponse
func (c *ClientWithResponses) DeleteTimesheetWithResponse(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*DeleteTimesheetResponse, error) {
	rsp, err := c.DeleteTimesheet(ctx, timesheetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTimesheetResponse(rsp)
}

// GetTimesheetWithResponse request returning *GetTimesheetResponse
func (c *ClientWithResponses) GetTimesheetWithResponse(ctx context.Context, timesheetId float32, reqEditors ...RequestEditorFn) (*GetTimesheetResponse, error) {
	rsp, err := c.GetTimesheet(ctx, timesheetId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTimesheetResponse(rsp)
}

// PutTimesheetWithBodyWithResponse request with arbitrary body returning *PutTimesheetResponse
func (c *ClientWithResponses) PutTimesheetWithBodyWithResponse(ctx context.Context, timesheetId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTimesheetResponse, error) {
	rsp, err := c.PutTimesheetWithBody(ctx, timesheetId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTimesheetResponse(rsp)
}

func (c *ClientWithResponses) PutTimesheetWithResponse(ctx context.Context, timesheetId float32, body PutTimesheetJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTimesheetResponse, error) {
	rsp, err := c.PutTimesheet(ctx, timesheetId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTimesheetResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, params *GetUsersParams, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, userId float32, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetWhereaboutsWithResponse request returning *GetWhereaboutsResponse
func (c *ClientWithResponses) GetWhereaboutsWithResponse(ctx context.Context, params *GetWhereaboutsParams, reqEditors ...RequestEditorFn) (*GetWhereaboutsResponse, error) {
	rsp, err := c.GetWhereabouts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWhereaboutsResponse(rsp)
}

// PostWhereaboutWithBodyWithResponse request with arbitrary body returning *PostWhereaboutResponse
func (c *ClientWithResponses) PostWhereaboutWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWhereaboutResponse, error) {
	rsp, err := c.PostWhereaboutWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWhereaboutResponse(rsp)
}

func (c *ClientWithResponses) PostWhereaboutWithResponse(ctx context.Context, body PostWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWhereaboutResponse, error) {
	rsp, err := c.PostWhereabout(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWhereaboutResponse(rsp)
}

// DeleteWhereaboutWithResponse request returning *DeleteWhereaboutResponse
func (c *ClientWithResponses) DeleteWhereaboutWithResponse(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*DeleteWhereaboutResponse, error) {
	rsp, err := c.DeleteWhereabout(ctx, whereaboutId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWhereaboutResponse(rsp)
}

// GetWhereaboutWithResponse request returning *GetWhereaboutResponse
func (c *ClientWithResponses) GetWhereaboutWithResponse(ctx context.Context, whereaboutId float32, reqEditors ...RequestEditorFn) (*GetWhereaboutResponse, error) {
	rsp, err := c.GetWhereabout(ctx, whereaboutId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWhereaboutResponse(rsp)
}

// PutWhereaboutWithBodyWithResponse request with arbitrary body returning *PutWhereaboutResponse
func (c *ClientWithResponses) PutWhereaboutWithBodyWithResponse(ctx context.Context, whereaboutId float32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWhereaboutResponse, error) {
	rsp, err := c.PutWhereaboutWithBody(ctx, whereaboutId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWhereaboutResponse(rsp)
}

func (c *ClientWithResponses) PutWhereaboutWithResponse(ctx context.Context, whereaboutId float32, body PutWhereaboutJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWhereaboutResponse, error) {
	rsp, err := c.PutWhereabout(ctx, whereaboutId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWhereaboutResponse(rsp)
}

// ParseGetAttachmentsResponse parses an HTTP response from a GetAttachmentsWithResponse call
func ParseGetAttachmentsResponse(rsp *http.Response) (*GetAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32      `json:"count,omitempty"`
			Next     *string       `json:"next"`
			Previous *string       `json:"previous"`
			Results  *[]Attachment `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostAttachmentResponse parses an HTTP response from a PostAttachmentWithResponse call
func ParsePostAttachmentResponse(rsp *http.Response) (*PostAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Attachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeleteAttachmentResponse parses an HTTP response from a DeleteAttachmentWithResponse call
func ParseDeleteAttachmentResponse(rsp *http.Response) (*DeleteAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAttachmentResponse parses an HTTP response from a GetAttachmentWithResponse call
func ParseGetAttachmentResponse(rsp *http.Response) (*GetAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutAttachmentResponse parses an HTTP response from a PutAttachmentWithResponse call
func ParsePutAttachmentResponse(rsp *http.Response) (*PutAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attachment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetContractRolesResponse parses an HTTP response from a GetContractRolesWithResponse call
func ParseGetContractRolesResponse(rsp *http.Response) (*GetContractRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32        `json:"count,omitempty"`
			Next     *string         `json:"next"`
			Previous *string         `json:"previous"`
			Results  *[]ContractRole `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetContractRoleResponse parses an HTTP response from a GetContractRoleWithResponse call
func ParseGetContractRoleResponse(rsp *http.Response) (*GetContractRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractRole
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetContractUsersResponse parses an HTTP response from a GetContractUsersWithResponse call
func ParseGetContractUsersResponse(rsp *http.Response) (*GetContractUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32        `json:"count,omitempty"`
			Next     *string         `json:"next"`
			Previous *string         `json:"previous"`
			Results  *[]ContractUser `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetContractUserResponse parses an HTTP response from a GetContractUserWithResponse call
func ParseGetContractUserResponse(rsp *http.Response) (*GetContractUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContractUser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetContractsResponse parses an HTTP response from a GetContractsWithResponse call
func ParseGetContractsResponse(rsp *http.Response) (*GetContractsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetContractResponse parses an HTTP response from a GetContractWithResponse call
func ParseGetContractResponse(rsp *http.Response) (*GetContractResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContractResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Contract
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetAttachmentDownloadResponse parses an HTTP response from a GetAttachmentDownloadWithResponse call
func ParseGetAttachmentDownloadResponse(rsp *http.Response) (*GetAttachmentDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttachmentDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetCompanyLogoDownloadResponse parses an HTTP response from a GetCompanyLogoDownloadWithResponse call
func ParseGetCompanyLogoDownloadResponse(rsp *http.Response) (*GetCompanyLogoDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCompanyLogoDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetTimesheetContractPdfDownloadResponse parses an HTTP response from a GetTimesheetContractPdfDownloadWithResponse call
func ParseGetTimesheetContractPdfDownloadResponse(rsp *http.Response) (*GetTimesheetContractPdfDownloadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimesheetContractPdfDownloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetLeaveFeedResponse parses an HTTP response from a GetLeaveFeedWithResponse call
func ParseGetLeaveFeedResponse(rsp *http.Response) (*GetLeaveFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaveFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetMyLeaveFeedResponse parses an HTTP response from a GetMyLeaveFeedWithResponse call
func ParseGetMyLeaveFeedResponse(rsp *http.Response) (*GetMyLeaveFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyLeaveFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetUserLeaveFeedResponse parses an HTTP response from a GetUserLeaveFeedWithResponse call
func ParseGetUserLeaveFeedResponse(rsp *http.Response) (*GetUserLeaveFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserLeaveFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetWhereaboutFeedResponse parses an HTTP response from a GetWhereaboutFeedWithResponse call
func ParseGetWhereaboutFeedResponse(rsp *http.Response) (*GetWhereaboutFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWhereaboutFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetMyWhereaboutFeedResponse parses an HTTP response from a GetMyWhereaboutFeedWithResponse call
func ParseGetMyWhereaboutFeedResponse(rsp *http.Response) (*GetMyWhereaboutFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMyWhereaboutFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetUserWhereaboutFeedResponse parses an HTTP response from a GetUserWhereaboutFeedWithResponse call
func ParseGetUserWhereaboutFeedResponse(rsp *http.Response) (*GetUserWhereaboutFeedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserWhereaboutFeedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.File
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetHolidaysResponse parses an HTTP response from a GetHolidaysWithResponse call
func ParseGetHolidaysResponse(rsp *http.Response) (*GetHolidaysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHolidaysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32   `json:"count,omitempty"`
			Next     *string    `json:"next"`
			Previous *string    `json:"previous"`
			Results  *[]Holiday `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetHolidayResponse parses an HTTP response from a GetHolidayWithResponse call
func ParseGetHolidayResponse(rsp *http.Response) (*GetHolidayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHolidayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Holiday
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetPerformanceImportsResponse parses an HTTP response from a GetPerformanceImportsWithResponse call
func ParseGetPerformanceImportsResponse(rsp *http.Response) (*GetPerformanceImportsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerformanceImportsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32                       `json:"count,omitempty"`
			Next     *string                        `json:"next"`
			Previous *string                        `json:"previous"`
			Results  *[]PerformanceImportSuggestion `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetLeaveResponse parses an HTTP response from a GetLeaveWithResponse call
func ParseGetLeaveResponse(rsp *http.Response) (*GetLeaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32 `json:"count,omitempty"`
			Next     *string  `json:"next"`
			Previous *string  `json:"previous"`
			Results  *[]Leave `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostLeaveResponse parses an HTTP response from a PostLeaveWithResponse call
func ParsePostLeaveResponse(rsp *http.Response) (*PostLeaveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostLeaveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Leave
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeleteLeaveIdResponse parses an HTTP response from a DeleteLeaveIdWithResponse call
func ParseDeleteLeaveIdResponse(rsp *http.Response) (*DeleteLeaveIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteLeaveIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetLeaveIdResponse parses an HTTP response from a GetLeaveIdWithResponse call
func ParseGetLeaveIdResponse(rsp *http.Response) (*GetLeaveIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaveIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Leave
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutLeaveIdResponse parses an HTTP response from a PutLeaveIdWithResponse call
func ParsePutLeaveIdResponse(rsp *http.Response) (*PutLeaveIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutLeaveIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Leave
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetLeaveTypeResponse parses an HTTP response from a GetLeaveTypeWithResponse call
func ParseGetLeaveTypeResponse(rsp *http.Response) (*GetLeaveTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaveTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LeaveType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetLeaveTypesResponse parses an HTTP response from a GetLeaveTypesWithResponse call
func ParseGetLeaveTypesResponse(rsp *http.Response) (*GetLeaveTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeaveTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32     `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]LeaveType `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetLocationsResponse parses an HTTP response from a GetLocationsWithResponse call
func ParseGetLocationsResponse(rsp *http.Response) (*GetLocationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32    `json:"count,omitempty"`
			Next     *string     `json:"next"`
			Previous *string     `json:"previous"`
			Results  *[]Location `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetLocationResponse parses an HTTP response from a GetLocationWithResponse call
func ParseGetLocationResponse(rsp *http.Response) (*GetLocationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLocationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Location
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Me
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetPerformanceTypesResponse parses an HTTP response from a GetPerformanceTypesWithResponse call
func ParseGetPerformanceTypesResponse(rsp *http.Response) (*GetPerformanceTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerformanceTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32           `json:"count,omitempty"`
			Next     *string            `json:"next"`
			Previous *string            `json:"previous"`
			Results  *[]PerformanceType `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetPerformanceTypeResponse parses an HTTP response from a GetPerformanceTypeWithResponse call
func ParseGetPerformanceTypeResponse(rsp *http.Response) (*GetPerformanceTypeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerformanceTypeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PerformanceType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetPerformancesResponse parses an HTTP response from a GetPerformancesWithResponse call
func ParseGetPerformancesResponse(rsp *http.Response) (*GetPerformancesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerformancesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostPerformanceResponse parses an HTTP response from a PostPerformanceWithResponse call
func ParsePostPerformanceResponse(rsp *http.Response) (*PostPerformanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPerformanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeletePerformanceResponse parses an HTTP response from a DeletePerformanceWithResponse call
func ParseDeletePerformanceResponse(rsp *http.Response) (*DeletePerformanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePerformanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPerformanceResponse parses an HTTP response from a GetPerformanceWithResponse call
func ParseGetPerformanceResponse(rsp *http.Response) (*GetPerformanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPerformanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutPerformanceResponse parses an HTTP response from a PutPerformanceWithResponse call
func ParsePutPerformanceResponse(rsp *http.Response) (*PutPerformanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPerformanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			union json.RawMessage
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetRangeAvailabilityResponse parses an HTTP response from a GetRangeAvailabilityWithResponse call
func ParseGetRangeAvailabilityResponse(rsp *http.Response) (*GetRangeAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRangeAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetRangeInfoResponse parses an HTTP response from a GetRangeInfoWithResponse call
func ParseGetRangeInfoResponse(rsp *http.Response) (*GetRangeInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRangeInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetTimesheetsResponse parses an HTTP response from a GetTimesheetsWithResponse call
func ParseGetTimesheetsResponse(rsp *http.Response) (*GetTimesheetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimesheetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32     `json:"count,omitempty"`
			Next     *string      `json:"next"`
			Previous *string      `json:"previous"`
			Results  *[]Timesheet `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostTimesheetResponse parses an HTTP response from a PostTimesheetWithResponse call
func ParsePostTimesheetResponse(rsp *http.Response) (*PostTimesheetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTimesheetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Timesheet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeleteTimesheetResponse parses an HTTP response from a DeleteTimesheetWithResponse call
func ParseDeleteTimesheetResponse(rsp *http.Response) (*DeleteTimesheetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTimesheetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTimesheetResponse parses an HTTP response from a GetTimesheetWithResponse call
func ParseGetTimesheetResponse(rsp *http.Response) (*GetTimesheetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTimesheetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Timesheet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutTimesheetResponse parses an HTTP response from a PutTimesheetWithResponse call
func ParsePutTimesheetResponse(rsp *http.Response) (*PutTimesheetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTimesheetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Timesheet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32 `json:"count,omitempty"`
			Next     *string  `json:"next"`
			Previous *string  `json:"previous"`
			Results  *[]User  `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParseGetWhereaboutsResponse parses an HTTP response from a GetWhereaboutsWithResponse call
func ParseGetWhereaboutsResponse(rsp *http.Response) (*GetWhereaboutsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWhereaboutsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Count    *float32      `json:"count,omitempty"`
			Next     *string       `json:"next"`
			Previous *string       `json:"previous"`
			Results  *[]Whereabout `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePostWhereaboutResponse parses an HTTP response from a PostWhereaboutWithResponse call
func ParsePostWhereaboutResponse(rsp *http.Response) (*PostWhereaboutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWhereaboutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Whereabout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest
	}

	return response, nil
}

// ParseDeleteWhereaboutResponse parses an HTTP response from a DeleteWhereaboutWithResponse call
func ParseDeleteWhereaboutResponse(rsp *http.Response) (*DeleteWhereaboutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWhereaboutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWhereaboutResponse parses an HTTP response from a GetWhereaboutWithResponse call
func ParseGetWhereaboutResponse(rsp *http.Response) (*GetWhereaboutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWhereaboutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Whereabout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}

// ParsePutWhereaboutResponse parses an HTTP response from a PutWhereaboutWithResponse call
func ParsePutWhereaboutResponse(rsp *http.Response) (*PutWhereaboutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWhereaboutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Whereabout
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest
	}

	return response, nil
}
